#include <stdio.h>
#include<math.h>
#include<stdlib.h>
#include <string.h>

#define MAX 10
#define MIN 0

#define BIN 2
#define HEX 3

typedef struct node{

    union {
    int dato; // operando o resultado para hexadecimal  
    char dato_binario[9];
     //cadena para almacenar el operando/resultado  //binario
    char operacion[10]; // cadena descriptiva de la operacion  } contenido;
    }op;
    void * siguiente;
} nodo;


/*typedef struct Nodo{

    int op1,op2,res;
    char operacion[5];
    struct Nodo * siguiente;
}Nodo;
*/











/*
void calculadora_2(int seleccionado, int x, int y, int  res,Lista * l,int m){

    int n1=binario_decimal(x);
    int n2=binario_decimal(y);
    switch(seleccionado){
			case 1:
			  //  printf("%d\n",y);printf("%d\n",x);
			    res= (n1 | n2);
			    res=decimal_binario(res);
                printf("0b%d OR 0b%d = 0b%d .\n",x,y,res);
			break;
			case 2:
                res= n1 & n2;
                res=decimal_binario(res);
                printf("0b%d AND 0b%d = 0b%d.\n",x,y,res);
            break;
			case 3:
			    res= n1 ^ n2;
			    res=decimal_binario(res);
                printf("0b%d XOR 0b%d = 0b%d.\n",x,y,res);

			break;
			case 4:
                res= n1 << n2;
                res=decimal_binario(res);
                printf("0b%d << 0b%d = 0b%d.\n",x,y,res);
			break;
			case 5:
                res= n1 >> n2;
                res=decimal_binario(res);
                printf("0b%d >> 0b%d = 0b%d.\n",x,y,res);
			break;
			default:
				seleccionado =  0;
				printf("Hasta pronto :).\n");
			break;
		}
		if(m && seleccionado){
                Nodo *n;
                n->op1=n1;
                n->op2=n2;
                n->res=res;
                if(seleccionado==1)
                    strcpy(n->operacion,"OR");
                if(seleccionado==2)
                    strcpy(n->operacion,"AND");
                if(seleccionado==3)
                    strcpy(n->operacion,"XOR");
                if(seleccionado==4)
                    strcpy(n->operacion,"<<");
                else strcpy(n->operacion,">>");

                Insertar_Nodo(l,n);
		}
}

void calculadora_3(int seleccionado, int x, int y, int  res,Lista * l,int m){

    switch(seleccionado){
			case 1:
			  //  printf("%d\n",y);printf("%d\n",x);
			    res= (x | y);
                printf("0x%x OR 0x%x = 0x%x .\n",x,y,res);
			break;
			case 2:
                res= x & y;
                printf("0x%x AND 0x%x = 0x%x.\n",x,y,res);
            break;
			case 3:
			    res= x ^ y;
                printf("0x%x XOR 0x%x = 0x%x.\n",x,y,res);

			break;
			case 4:
                res= x << y;
                printf("0x%x << 0x%x = 0x%x.\n",x,y,res);
			break;
			case 5:
                res= x >> y;
                printf("0x%x >> 0x%x = 0x%x.\n",x,y,res);
			break;
		}
		if(m && seleccionado){
                Nodo *n;
                n->op1=x;
                n->op2=y;
                n->res=res;
                if(seleccionado==1)
                    strcpy(n->operacion,"OR");
                if(seleccionado==2)
                    strcpy(n->operacion,"AND");
                if(seleccionado==3)
                    strcpy(n->operacion,"XOR");
                if(seleccionado==4)
                    strcpy(n->operacion,"<<");
                else strcpy(n->operacion,">>");

                Insertar_Nodo(l,n);
		}
}
*/
int main(){
//    Lista * l=NULL;


	int seleccionado=1;
	char num1[9];
	char num2[9];
	int x,y,res,base=0,memoria=0;
    char res1[9];
	//mostrar_menu();
	while(seleccionado){

		mostrar_menu1();
		do{
            printf("Introduzca operacion: ");
			scanf("%d",&seleccionado);
			if(seleccionado<MIN || seleccionado >MAX){
                printf("ERROR. Vuelva a introducir la opercacion.\n");
			}
		}while(seleccionado<MIN || seleccionado >MAX);
		if(seleccionado && base==1 && seleccionado<6 ){//por si es 0
           leer_operandos_hex(&x,&y);
          // printf("%d\n",y);printf("%d\n",x);
          calculadora_1(seleccionado,x,y,res,memoria);
        }else if(seleccionado && base==0 && seleccionado<6 ){
            leer_operandos_bin(&num1,&num2);
            x=strtol(num1,NULL,2);
            y=strtol(num2,NULL,2);
            calculadora_2(seleccionado,x,y,res1,memoria);
        }
        if(seleccionado==6){
            do{
                    printf("Seleccione el nuevo formato(0-> binario, 1-> hexadecimal: \n");
                    scanf("%d",&base);
                    if(!(base ==0 || base ==1)){printf("ERROR. Formato no valido");}
			    }while(!(base==0 || base==1));
        }


        if(seleccionado==6){
            do{
                printf("Seleccione el nuevo formato(0-> binario, 1-> hexadecimal: \n");
                scanf("%d",&base);
                if(!(base ==0 || base ==1)){printf("ERROR. Formato no valido");}
			    }while(!(base==0 || base==1));
        }

            /*
            switch(seleccionado){
                case 7:
                    memoria=1;
                    printf("Se ha habilitado la memoria.\n");
                break;
                case 8:
                    memoria=0;
                    printf("Se ha deshabilitado la memoria.\n");
                break;
                case 9:
                    borrar_lista(l);
                break;
                case 10:
                    mostrar_lista(l);
                break;
            }
            */



    }
    return 0;
}
